리액트 컴포넌트 생성 주기

컴포넌트 생성 순서
|----------------- 컴포넌트 생성 ---------------|------ 완료 ------|
constructor -> componentWillMount -> render -> componentDidMount

컴포넌트 제거시 실행
componentWillUnMount

컴포넌트 prop 변경될때 실행 순서
|------- prop 변화 -------|------------------------ 업데이트 처리 ----------------------|------- 완료 -------|
componentWilReceiveProps -> shouldComponentUpdate -> componentWillUpdate -> render -> componentDidUpdate

컴포넌트 state 변경될떄 실행 순서
| state 변화 바로 업데이트 처리 -----------------------------|------- 완료 -------|
shouldComponentUpdate -> componentWillUpdate -> render -> componentDidUpdate

constructor 생성 -> 기본 state 지정가능
constructor(props) {
  super(props);
}

componentWillMount -> 컴포넌트가 DOM 위에 생성 전에 실행

render -> 컴포넌트 렌더링

componentDidMount -> 컴포넌트 렌더링 후 실행 setTimeout, setInterval 과 같은 AJAX 처리 생성

componentWillReceiveProps -> 컴포넌트가 prop을 새로 받을 떄 실행 -> 하위 컴포넌트 state 업데이트시 사용
componentWillReceiveProps(nextProps) {

}

shouldComponentUpdate -> props 또는 state가 변경될시 리렌터링 할지 결정
shouldComponentUpdate(nextProps, nextState){
  return nextProps.id !== this.props.id;
}

componentWillUpdate -> 컴포넌트 업데이트 전 실행
componentWillUpdate(nextProps, nextState){

}

componentDidUpdate -> 컴포넌트 리렌더링 마친 후 실행
componentDidUpdate(prevProps, prevState){

}

componentWillUnmount -> 컴포넌트가 DOM에서 사라진후 실행
componentWillUnmount(){

}


///
540 에러
module.js:540
    throw err;
    ^

Error: Cannot find module

node app.js 실행시킬때
뒤에 이름 잘못 지정해서 나는 에러
node app 과 같은 식으로 지정해야함

///
json parse 사용시 에러
SyntaxError: Unexpected token o in JSON at position 1
    at JSON.parse (<anonymous>)
    at Module._compile (module.js:643:30)
    at Object.Module._extensions..js (module.js:654:10)
    at Module.load (module.js:556:32)
    at tryModuleLoad (module.js:499:12)
    at Function.Module._load (module.js:491:3)
    at Function.Module.runMain (module.js:684:10)
    at startup (bootstrap_node.js:187:16)

이미 사용하려는 유형이 json 이라 할필요 없음

///
언제 exit(0);로 끝내고 언제 exit(1);로 끝내는 건가요?
보통 문제가 없으면 0을
문제가 있으면 1을 리턴하도록 작성합니다.

var args = process.argv.slice(2);
첫 번째 arg는 일반적으로 nodejs의 경로이고 두 번째 arg는 실행중인 스크립트의 위치입니다.

///
SPA : single Page Web Application
싱글 페이지 웹 애플리케이션
기존의 웹 페이지가 URL 기반으로 페이지를 서버에서 내려받던 형태에서 물리적인 페이지는 진입 페이지 하나만 가지면서 다양한 컴포넌트와 라우팅 기법으로 클라이언트에서 대부분의 로직을 제어하는 페이지 형태

///
install -g
글로벌 옵션은 설치를 하면 path 에 잡혀서 명령어를 바로 실행가능

JSX 를 사용하면 자바스크립트로 컴파일 과정을 거치고, 그 대 컴파일러에서 이루어지는 최적화를 통해 떄떄로 성능향상을 꾀할 수 있음

전달하는 값을 주고 받을 떄 사용하는 변수를 프로퍼티(props)
단일 컴포넌트 내부에서 변화되는 값을 상태(state)
props 는 컴포넌트 속성을 나타내는 변수값을 담는 객체
state 는 컴포넌트 상태를 나타내는 변숫값을 담는 객

console.log는 요소를 HTML과 같은 트리 구조로 출력합니다.
console.dir은 요소를 JSON과 같은 트리 구조로 출력합니다.

props를 만들면 자식에게 전달가능