
///
# requests 를 이용하여 소스 크롤링
# pip install requests 로 간단 설치
import requests
# requests.get('주소') 를 통해 해당 주소 정보 호출
req = requests.get('https://beomi.github.io/beomi.github.io_old/')
# 정상호출 <Response [200]>
# print(req)
# 많은 정보를 내포 , header 정보 가져오려면
headers = req.headers
# print(headers)
# req.test 를 통해 HTML 관련 소스 가져옴
html = req.text
# print(html)
# 정상호출인지 아닌지 판단
status = req.status_code
print(status)
# 정상이면 200

# 쉽게 크롤링 가능 하지만... 문자열 형태의 반환이라 가공하기 어려움
# 정보를 더 추출하고 싶다면 BeautifulSoup 를 이용해야함


///
# Beautiful Soup(뷰티플 수프) 사용법과 예제
# pip install bs4
# file import
import requests
from bs4 import BeautifulSoup

req = requests.get('http://beomi.github.io/beomi.github.io_old/')
html = req.text
# BeautifulSoup 'html.parser'를 통해 python 객체 형식으로 변환 시킨다.
soup = BeautifulSoup(html, 'html.parser')
# print(soup)
# 이제 원하는 데이터를 soup.select를 통해 css Selector를 이용하듯이 불러올 수 잇다.
# soup 객체들의 리스트임
# 1. h3 태그들 가져오기
h3 = soup.select('h3')
print(h3)

# 2. h3 아래의 a를 불러온다.
a = soup.select('h3 > a')
print(a)

#
for i in a:
    # tag안의 텍스트 가져옴
    # print(i.text)
    # get 으로 속성 가져옴
    print(i.get('href'))


#
콘다에서 jpype 에러 해결법
ImportError: No module named 'jpype1'

pip install jpype1 해도 안됨

이럴때는 콘다에서 강제로 설치해버리자
conda install -c conda-forge jpype1

성공!

###
 소수인지 판단
bool primeNumber(int n){
    if(n<2){
        return false;
    }
    int num = sqrt(n);
    for (int i = 2; i<= num; i++){
        if (n % i ==0){
            return false;
        }
    }
    return true;
}

int main() {
    int N = 31;
    bool result = primeNumber(N);
    if(result){
        std::cout << "소수\n";
    } else {
        std::cout << "소수 아님\n";
    }
    return 0;
}


### 에라토스테네스의 체
#include <iostream>

// 에라토스테네스의 체 알고리즘
// N이라는 숫자가 주어졌을 때 N보다 작은 소수들을 구하라
void getPrimeNumber(int n){
    int* arr = (int*)malloc(sizeof(int));
    for (int i = 2; i <= n; i++){
        arr[i] = i;
    }

    for (int i = 2; i <= n; i++){
        if(arr[i] == 0){
            continue;
        }
        for(int j = i*2; j <=n; j+=i){
            arr[j] = 0;
        }
    }

    for (int i = 2; i<=n; i++){
        if (arr[i] != 0){
            std::cout << arr[i] << " ";
        }
    }
}

int main() {
    int N = 10;
    getPrimeNumber(N);
    return 0;
}

///
람다(lamda) 함수 설명

람다함수는 한줄로 함수를 작성하는 방법이다.
예를 들면 1 더하기 함수 add 를 만들면
def add(x):
    return x + 1
과 같이 된다.
그리고 값을 여러개를 집어 넣으면
add(1)
add(2) 와 같은 식으로 집어넣어야하지만
이를 람다함수로 바꾸면
arr = lambda x: x+1, [1,2]
와 같은 식을 ㅗ쉽게 변환이 가능하다.
lambda 뒤에는 매개변수, : 뒤에는 구해야하는 함수, , 뒤에는 들어갈 값 으로 분리된다.

def add(x):
    return x+1
arr = []
arr = list(map(add,[1,2]))
print(arr)
arr2 = []
arr2= list(map(lambda x : x+1, [1,2]))
print(arr2)
# print(list(arr2))


///
Called object type 'int' is not a function or function pointer
오류는 이름이 중복될 떄 일어난다.
즉, function add 가 아니라 int add 가 되어 일어난다.
#include <iostream>
int add(int n){
    return n+1;ls
}
int main(void){
    int adds = add(1);
    std::cout << adds;
}

받는 변수이름을 다르게 한다.

///
///
이중 for문 빠져나가는 법
for 문을 이용할때 원하는 값이 나오면 바로 빠져나가게 하려면 break 를 사용한다.
하지만 이것은 바로 직전의 for 문 만을 빠져 나갈 수 있다.
따라서 두번 도는 이중 for 문을 빠져 나가려면 break 과 함께 위에 선언을 하나 더하여 연달아서 빠져 나가게 한다.
예를 들면 boolean tf = false 로 선언한뒤 이중 for 문 break 과 함께 tf = true 로 선언한 뒤
if (TF) { break } 을 한번 더 써주는 방식이다.
코드는 아래와 같다.

public static void main(String[] args) {
    boolean tf = false;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (i == 1 && j == 1) {
            	System.out.println("find!");
                tf = true;
                break;
            }
        }
        if (tf) {
            break;
        }
    }
}


#include <iostream>
#include <time.h>

// 기본 피보나치 재귀 함수 활용 -> 6.04ms 걸림 O(2^N)
int fibonacci(int n){
    if(n==1| n==2){
        return 1;
    }
    return fibonacci(n-1) + fibonacci(n-2);
}

// 빠름(재귀보다 훨씬 빠름) --> 1.7ms
int fibonacci2(int n){
    int sum = 0;
    int n_1 = 1;
    int n_2 = 1;
    if(n ==1| n==2){
        return 1;
    }
    while(n-- > 2){
        sum = n_1 + n_2;
        n_2 = n_1;
        n_1 = sum;
    }
    return sum;
}

// 재귀를 쓰고 싶을떈 메모이제이션을 통해 더 빠르게! 그래도 복잡해질수록 단순 for 나 while 보다 느리다. -> 12.77ms
int memo[100];
int fibonacci3(int n){


    if(n==1 | n==2){
        return 1;
    }
    if(memo[n] != 0){
        return memo[n];
    } else{
        memo[n] = fibonacci3(n-1) + fibonacci3(n-2);
        return memo[n];
    }
}

// 배열로 더 빠르게 -> 1.85ms
int fibonacci4(int n){
    int A[100] ={0,};

    A[0] = 0;
    A[1] = 1;

    for(int i =2; i<=n; i++){
        A[i] = A[i-1] + A[i-2];
    }
    return int(A[n]);
}
// 질문
// 왜 int A[]에 잡음이 끼는가 -> 0으로 초기화 안됨
// 메모 왤케 느려 --
// 왜 똑같을까 반복횟수가...
int main(void){
    clock_t start;
    clock_t end;
    int n = 10;
//    start = clock();
//    int ans = fibonacci(n);
//    end = clock();
//    std::cout << ans << std::endl;
////    std::cout << (double)(end - start) / CLOCKS_PER_SEC << std::endl;
//    printf("%f", (double)(end - start));

//    start = clock();
//    int ans2 = fibonacci2(n);
//    end = clock();
//    std::cout << ans2 << std::endl;
////    std::cout << (double)(end - start) / CLOCKS_PER_SEC << std::endl;
//    printf("%f", (double)(end - start));

//    start = clock();
//    int ans3 = fibonacci3(n);
//    std::cout << ans3 << std::endl;
//    end = clock();
//    std::cout << (double)(end - start) / CLOCKS_PER_SEC << std::endl;

    start = clock();
    int ans4 = fibonacci4(n);
//    std::cout << ans4 << std::endl;
    end = clock();
//    std::cout << (double)(end - start) / CLOCKS_PER_SEC << std::endl;
    printf("%f", (double)(end - start));

}

